In choosing the key development technologies for developing the application, we mainly looked at which tools our team had used before. We found that the best language for the application to be developed in was Java, as the entire team was relatively experienced in using Java from previous projects. By choosing Java, determining the other tools to be used was very simple. For testing we chose to use the most popular Java unit testing framework: JUnit4. The team all has some experience using JUnit to write tests and with the popularity of the framework, overcoming any inexperience should be easy. We will be using Ant for our buildfile. Since none of the team members have experience with Java buildfiles, we chose Ant over the other contender (Maven) due to the simple integration with our continuous integration system and IDEs. Since the application is being developed as a GUI, we also needed to decide on a GUI framework to use. We decided to go with Swing, due to its wide support and popularity and the fact that it is included in the Java standard library. Since the application can not run slow, we will be using JRat in case we run into any performance bottlenecks in order to identify and remove them. We will be using Apache log4j library for any logging necessary in the application.
For a version control management system, we decided to use Git primarily due to the Github service. Github provides us with an issue tracker, wiki, and a great interface. Git itself makes version control very simple to use as well with built-in functionality in most popular IDEs. For IDEs we couldn't find any reason for requiring every team member to use the same IDE, so we determined that team members could choose to use whichever IDE they were most comfortable with. Some team members have chosen to use Eclipse while others have chosen to use IntelliJ IDEA. For a continuous integration system, we will be using TeamCity. None of our team members have any experience in this realm either so the choice was made primarily from looking at the ease of use and integration with the other systems we chose. TeamCity is supported natively in IntelliJ IDEA and supported by a plugin for Eclipse. Github also provides a service hook for TeamCity which causes the project to be built and the tests to be run every time a commit is made to the repository.
Since our application will require the use of a database to store the information, we will be using MySQL as our database management system, interfacing with the application through the built-in JDBC API.